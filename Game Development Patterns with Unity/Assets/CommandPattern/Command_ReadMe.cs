using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Command_ReadMe : MonoBehaviour
{
    /* 커맨드 패턴(Command Pattern)
     * 커맨드 패턴 : 
     *  -'액션'을 수행하거나 상태 변경을 트리거하는 데 필요한 정보를 
     *                  캡슐화하는 매커니즘을 제안하면 '액션'을 수행항 대상 객체와 분리한다.
     *  - 액션 요청을 캡슐화 및 분리를 통해 나중에 실행할 수 있도록 큐에 넣는다.
     * 
     * 커맨드 패턴에 사용하는 기본 클래스를 살펴보자
     *  - invoker(호출자)는 명령을 실행하는 방법을 알고 실행한 명령을 즐겨찾기할 수도 있는 객체다.
     *  - receiver(수신자)는 명령을 받아서 수행할 수 있는 종류의 객체다.
     *  - CommandBase는 개별 ConcreteCommand 클래스가 무조건 상속해야 하는 추상 클래스다.
     *    호출자가 특정 명령을 실행하기 위해 호출할 수 있는 Execute() 메서드를 노출한다.
     *    
     *  장점
     *  - 분리 : 커맨드 패턴은 실행 방법을 하는 객체에게서 작업을 호출하는 객체를 분리할 수 있다. 
     *              이 분리 계층으로 즐겨찾기와 시퀀스 작업을 수행하는 중개자를 추가할 수 있다.
     *  - 시퀀싱 : 커맨드 패턴은 되돌리기/다시하기 기능, 매크로, 명령 큐의 구현을 허용하고 사용자 
     *                입력을 큐에 넣는 작업을 용이하게 한다.
     *  단점
     *  - 복잡성 : 각 명령이 그 자체로 클래스다. 커맨드 패턴을 구현하려면 수많은 클래스가 필요하면 패턴으로 
     *                만들어진 코드의 유지 및 보수를 위해 패턴을 잘 이해해야 한다. 대부분 문제가 되지 않지만 특정
     *                목표를 염두에 두지 않은 채 커맨드 패턴을 사용하는 경우 복잡하고 장황하며 불필요한 계층이 
     *                될 수 있다.
     *                
     *  커맨드 패턴을 사용하는 경우
     *  - 실행 취소 : 대부분 텍스트와 이미지 에디터에서 볼 수 있는 실행 취소 및 재실행 시스템을 구현한다.
     *  - 매크로 : 공격 혹은 방어 콤포를 기록하고 자동으로 입력 키에 적용하여 실행할 수 있는 매크로 기록 시스템을 구현한다.
     *  - 자동화 : 봇이 자동으로 그리고 순차적으로 실행할 명령 집합을 기록하는 자동화 과정 혹은 행동을 구현한다.
     *          
     * 대안 살펴보기
     *  - 메멘토 : 메멘토(Memento)패턴은 객체 이전 상태로 되돌리는 기능을 제공한다. 우리가 실행한 게임 프로젝트의 
     *                리플레이 시스템을 구현할 때 첫 번째로 선택한 기능은 아니였다. 입력을 기록하고 이후 리플레이를 위해
     *                규에 넣는데 초점을 맞췄다. 이는 커맨드 패턴의 디자인 의도와 매우 잘맞다.
     *                이전 상태로 되돌리는 기능을 가진 시스템을 구현한다면 메멘토 패턴을 첫 번째로 선택하는 것이 좋다.
     *  - 큐/스택 : 큐와 스택은 패턴이 아닌 데이터 구조체다. InputHandler 클래스의 큐에 직접 모든 입력을 인코딩하고
     *                 저장할 수 있다. 커맨드 패턴을 사용하는 것보다 더 간단하며 장활하지 않다. 기존의 디자인 패턴을 사용하든
     *                 사용하지 않든 시스템을 구현할 때의 선택은 상황에 따라 달라진다. 충분히 시스템이 단순하다면 설계 패턴이 
     *                 장황하고 복잡해도 패턴을 사용하는 잠재적인 이점이 넘어설 수 있다.
     *
     *
     *
     *
    */
}

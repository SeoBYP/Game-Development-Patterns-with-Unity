using System.Collections;
using System.Collections.Generic;
using UnityEngine;


/*전략 패턴
 * 
 *  전략 패턴의 주요 목표는 런타임에 어떤 동작을 사용할 것인지의 결정을 연기하는 것이다.
 *  이는 전략 패턴을 통해 전략이라는 개별 클래스에 캡슐화된 일련의 행동을 정의할 수 있기 때문에 가능하다.
 *  각 전략은 서로 교환할 수 있으며 동작을 변경하고자 대상 콘텍스트 캑체에 할당할 수 있다.
 *  
 *  주요 플레이어
 *  - 콘텍스트(Context)는 다양하고 구체적인 전략 클래스를 사용하며 전략 인터페이스로 상호작용하는 클래스이다.
 *  - 전략 인터페이스는 모든 구체적인 전략 클래스에서 사용된다. 콘텍스트 클래스가 전략을 실행하는 데 
 *      사용할 수 있는 메서드를 노출한다.
 *  - 전략이라고도 부르는 구체적인 전략 클래스는 콘텍스트 객체에 적용할 수 있는 알고리즘 및 동작의 변형을 
 *      런타임에 구체적으로 구현한 것이다.
 *      
 *  장점
 *  - 캘슐화 : 개별 클래스에 알고리즘의 변형을 캡슐화하도록 강제한다는 점이 가장 큰 장점이다.
 *                코드를 구조화한 상태로 유지하면서 긴 조건문을 사용하는 것을 방지하는 데 도움이 된다.
 *  - 런타임 : 전략 패턴의 주요 이점은 런타임에 객체가 사용하는 알고리즘을 교환할 수 있는 메커니즘을 
 *                구현한다는 점이다. 객체를 더욱 동적으로 만들고 확장할 수 있다.
 *                
 *  단점 
 *  - 클라이언트 : 클라이언트 클래스는 선택해야 하는 전략을 알기 위해 클라이언트가 구현한 알고리즘의 변형과 
 *                      개별 전략을 알고 있어야 한다. 클라이언트는 객체가 살아있는 동안 예상대로 동작하는 지 확인해야 한다.
 *  - 혼란 : 전략 패턴과 상태 패턴은 구조가 매우 유사하지만 의도가 달라 어떤 것을 어느 경우에 사용할 지 선택하는 것이 
 *             선택하는 것이 어려울 수 있다. 대부분 문제가 되지 않지만 프로그래머 팀에서 일한다면 몇몇 동료가 어떤 패턴을 
 *             선택할 지 이해하지 못할 수 있다.
 *  
 *  
 * 
 * 
 * 
 */